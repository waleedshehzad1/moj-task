name: 🚀 HMCTS Task API - CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
  schedule:
    - cron: '0 2 * * 1-5' # Nightly builds on weekdays
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: 'Deploy to Production'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: hmcts-task-api

jobs:
  # Security and Dependencies Analysis
  security-analysis:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🛡️ OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'HMCTS Task API'
          path: './backend'
          format: 'ALL'

      - name: 📤 Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-reports
          path: reports/

  # Code Quality and Testing
  test-and-quality:
    name: 🧪 Test & Quality Assurance
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: postgres
          POSTGRES_DB: hmcts_tasks_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-type: [unit, integration, e2e]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd backend
          npm ci --prefer-offline --no-audit

      - name: 🔧 Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DB_HOST=localhost" >> .env.test
          echo "DB_PORT=5432" >> .env.test
          echo "DB_NAME=hmcts_tasks_test" >> .env.test
          echo "DB_USERNAME=postgres" >> .env.test
          echo "DB_PASSWORD=test_password" >> .env.test
          echo "REDIS_HOST=localhost" >> .env.test
          echo "REDIS_PORT=6379" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test

      - name: 🗄️ Run database migrations
        run: |
          cd backend
          npm run db:migrate
        env:
          NODE_ENV: test

      - name: 🔍 Lint code
        run: |
          cd backend
          npm run lint

      - name: 🧪 Run tests
        run: |
          cd backend
          case "${{ matrix.test-type }}" in
            "unit")
              npm run test -- --testPathPattern="unit|spec" --coverage --coverageReporters=lcov
              ;;
            "integration")
              npm run test -- --testPathPattern="integration" --runInBand
              ;;
            "e2e")
              npm run test -- --testPathPattern="e2e" --runInBand
              ;;
          esac
        env:
          NODE_ENV: test

      - name: 📊 Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            backend/coverage/
            backend/test-results/

  # Build and Package
  build:
    name: 🔨 Build & Package
    runs-on: ubuntu-latest
    needs: [security-analysis, test-and-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      - name: 🔐 Sign container image
        run: |
          echo "Signing container image with cosign..."
          # cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

  # Deploy to Development
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://hmcts-task-api-dev.azurewebsites.net

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: hmcts-dev-rg
          dns-name-label: hmcts-task-api-dev
          image: ${{ needs.build.outputs.image-tag }}
          environment-variables: |
            NODE_ENV=development
            PORT=3000
          secure-environment-variables: |
            DB_CONNECTION_STRING=${{ secrets.DEV_DB_CONNECTION_STRING }}
            JWT_SECRET=${{ secrets.DEV_JWT_SECRET }}
            REDIS_CONNECTION_STRING=${{ secrets.DEV_REDIS_CONNECTION_STRING }}

      - name: 🔍 Run smoke tests
        run: |
          cd backend
          npm ci --only=dev
          npm run test:smoke -- --env=development
        env:
          TEST_BASE_URL: https://hmcts-task-api-dev.azurewebsites.net

  # Deploy to Staging
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://hmcts-task-api-staging.azurewebsites.net

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: hmcts-task-api-staging
          images: ${{ needs.build.outputs.image-tag }}

      - name: 🔍 Run comprehensive tests
        run: |
          cd backend
          npm ci --only=dev
          npm run test:integration -- --env=staging
        env:
          TEST_BASE_URL: https://hmcts-task-api-staging.azurewebsites.net

  # Deploy to Production
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.deploy_to_production == 'true' || github.event_name == 'schedule')
    environment:
      name: production
      url: https://hmcts-task-api.azurewebsites.net

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🔄 Blue-Green Deployment
        run: |
          # Deploy to staging slot first
          az webapp config container set \
            --name hmcts-task-api \
            --resource-group hmcts-prod-rg \
            --slot staging \
            --docker-custom-image-name ${{ needs.build.outputs.image-tag }}
          
          # Wait for deployment to be ready
          sleep 60
          
          # Run health check on staging slot
          curl -f https://hmcts-task-api-staging.azurewebsites.net/health
          
          # Swap slots if health check passes
          az webapp deployment slot swap \
            --resource-group hmcts-prod-rg \
            --name hmcts-task-api \
            --slot staging \
            --target-slot production

      - name: ✅ Verify production deployment
        run: |
          # Health check
          curl -f https://hmcts-task-api.azurewebsites.net/health
          
          # Basic API test
          curl -f https://hmcts-task-api.azurewebsites.net/api/v1/tasks/stats

      - name: 📊 Update monitoring dashboards
        run: |
          echo "Updating Dynatrace dashboards..."
          # Update monitoring tags and metadata

  # Performance and Load Testing
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Run load tests with Artillery
        run: |
          npm install -g artillery
          cd backend/tests/performance
          artillery run load-test.yml --target https://hmcts-task-api-staging.azurewebsites.net

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: backend/tests/performance/results/

  # Security Scanning Post-Deploy
  security-scan-deployed:
    name: 🔍 Security Scan Deployed App
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🕷️ OWASP ZAP Security Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://hmcts-task-api-staging.azurewebsites.net'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Notifications
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: 📱 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#hmcts-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: 📧 Email Notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.office365.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 HMCTS Task API Deployment Failed"
          to: dev-team@hmcts.gov.uk
          from: ci-cd@hmcts.gov.uk
          body: |
            Deployment failed for HMCTS Task API
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            
            View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test, security-scan-deployed]
    if: always()

    steps:
      - name: 🗑️ Clean up old images
        run: |
          echo "Cleaning up old container images..."
          # Implement cleanup logic for old images

      - name: 📊 Update deployment metrics
        run: |
          echo "Updating deployment metrics in monitoring systems..."
          # Update Dynatrace or other monitoring systems
